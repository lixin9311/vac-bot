// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lixin9311/vac-bot/ent/vacdepartment"
	"github.com/lixin9311/vac-bot/tokyovacapi"
)

// VacDepartmentCreate is the builder for creating a VacDepartment entity.
type VacDepartmentCreate struct {
	config
	mutation *VacDepartmentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vdc *VacDepartmentCreate) SetCreatedAt(t time.Time) *VacDepartmentCreate {
	vdc.mutation.SetCreatedAt(t)
	return vdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vdc *VacDepartmentCreate) SetNillableCreatedAt(t *time.Time) *VacDepartmentCreate {
	if t != nil {
		vdc.SetCreatedAt(*t)
	}
	return vdc
}

// SetUpdatedAt sets the "updated_at" field.
func (vdc *VacDepartmentCreate) SetUpdatedAt(t time.Time) *VacDepartmentCreate {
	vdc.mutation.SetUpdatedAt(t)
	return vdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vdc *VacDepartmentCreate) SetNillableUpdatedAt(t *time.Time) *VacDepartmentCreate {
	if t != nil {
		vdc.SetUpdatedAt(*t)
	}
	return vdc
}

// SetPartition sets the "partition" field.
func (vdc *VacDepartmentCreate) SetPartition(s string) *VacDepartmentCreate {
	vdc.mutation.SetPartition(s)
	return vdc
}

// SetDepartmentID sets the "department_id" field.
func (vdc *VacDepartmentCreate) SetDepartmentID(i int) *VacDepartmentCreate {
	vdc.mutation.SetDepartmentID(i)
	return vdc
}

// SetData sets the "data" field.
func (vdc *VacDepartmentCreate) SetData(t *tokyovacapi.Department) *VacDepartmentCreate {
	vdc.mutation.SetData(t)
	return vdc
}

// Mutation returns the VacDepartmentMutation object of the builder.
func (vdc *VacDepartmentCreate) Mutation() *VacDepartmentMutation {
	return vdc.mutation
}

// Save creates the VacDepartment in the database.
func (vdc *VacDepartmentCreate) Save(ctx context.Context) (*VacDepartment, error) {
	var (
		err  error
		node *VacDepartment
	)
	vdc.defaults()
	if len(vdc.hooks) == 0 {
		if err = vdc.check(); err != nil {
			return nil, err
		}
		node, err = vdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VacDepartmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vdc.check(); err != nil {
				return nil, err
			}
			vdc.mutation = mutation
			node, err = vdc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vdc.hooks) - 1; i >= 0; i-- {
			mut = vdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vdc *VacDepartmentCreate) SaveX(ctx context.Context) *VacDepartment {
	v, err := vdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (vdc *VacDepartmentCreate) defaults() {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		v := vacdepartment.DefaultCreatedAt()
		vdc.mutation.SetCreatedAt(v)
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		v := vacdepartment.DefaultUpdatedAt()
		vdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vdc *VacDepartmentCreate) check() error {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := vdc.mutation.Partition(); !ok {
		return &ValidationError{Name: "partition", err: errors.New("ent: missing required field \"partition\"")}
	}
	if _, ok := vdc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New("ent: missing required field \"department_id\"")}
	}
	if _, ok := vdc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New("ent: missing required field \"data\"")}
	}
	return nil
}

func (vdc *VacDepartmentCreate) sqlSave(ctx context.Context) (*VacDepartment, error) {
	_node, _spec := vdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vdc *VacDepartmentCreate) createSpec() (*VacDepartment, *sqlgraph.CreateSpec) {
	var (
		_node = &VacDepartment{config: vdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vacdepartment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vacdepartment.FieldID,
			},
		}
	)
	if value, ok := vdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vacdepartment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vacdepartment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := vdc.mutation.Partition(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacdepartment.FieldPartition,
		})
		_node.Partition = value
	}
	if value, ok := vdc.mutation.DepartmentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vacdepartment.FieldDepartmentID,
		})
		_node.DepartmentID = value
	}
	if value, ok := vdc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vacdepartment.FieldData,
		})
		_node.Data = value
	}
	return _node, _spec
}

// VacDepartmentCreateBulk is the builder for creating many VacDepartment entities in bulk.
type VacDepartmentCreateBulk struct {
	config
	builders []*VacDepartmentCreate
}

// Save creates the VacDepartment entities in the database.
func (vdcb *VacDepartmentCreateBulk) Save(ctx context.Context) ([]*VacDepartment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vdcb.builders))
	nodes := make([]*VacDepartment, len(vdcb.builders))
	mutators := make([]Mutator, len(vdcb.builders))
	for i := range vdcb.builders {
		func(i int, root context.Context) {
			builder := vdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VacDepartmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdcb *VacDepartmentCreateBulk) SaveX(ctx context.Context) []*VacDepartment {
	v, err := vdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
