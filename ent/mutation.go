// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/lixin9311/vac-bot/ent/predicate"
	"github.com/lixin9311/vac-bot/ent/schema"
	"github.com/lixin9311/vac-bot/ent/vacdepartment"
	"github.com/lixin9311/vac-bot/ent/vacuser"
	"github.com/lixin9311/vac-bot/tokyovacapi"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeVacDepartment = "VacDepartment"
	TypeVacUser       = "VacUser"
)

// VacDepartmentMutation represents an operation that mutates the VacDepartment nodes in the graph.
type VacDepartmentMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	updated_at       *time.Time
	partition        *string
	department_id    *int
	adddepartment_id *int
	data             **tokyovacapi.Department
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*VacDepartment, error)
	predicates       []predicate.VacDepartment
}

var _ ent.Mutation = (*VacDepartmentMutation)(nil)

// vacdepartmentOption allows management of the mutation configuration using functional options.
type vacdepartmentOption func(*VacDepartmentMutation)

// newVacDepartmentMutation creates new mutation for the VacDepartment entity.
func newVacDepartmentMutation(c config, op Op, opts ...vacdepartmentOption) *VacDepartmentMutation {
	m := &VacDepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeVacDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVacDepartmentID sets the ID field of the mutation.
func withVacDepartmentID(id int) vacdepartmentOption {
	return func(m *VacDepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *VacDepartment
		)
		m.oldValue = func(ctx context.Context) (*VacDepartment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VacDepartment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVacDepartment sets the old VacDepartment of the mutation.
func withVacDepartment(node *VacDepartment) vacdepartmentOption {
	return func(m *VacDepartmentMutation) {
		m.oldValue = func(context.Context) (*VacDepartment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VacDepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VacDepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *VacDepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *VacDepartmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VacDepartmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VacDepartment entity.
// If the VacDepartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacDepartmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VacDepartmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VacDepartmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VacDepartmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the VacDepartment entity.
// If the VacDepartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacDepartmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VacDepartmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPartition sets the "partition" field.
func (m *VacDepartmentMutation) SetPartition(s string) {
	m.partition = &s
}

// Partition returns the value of the "partition" field in the mutation.
func (m *VacDepartmentMutation) Partition() (r string, exists bool) {
	v := m.partition
	if v == nil {
		return
	}
	return *v, true
}

// OldPartition returns the old "partition" field's value of the VacDepartment entity.
// If the VacDepartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacDepartmentMutation) OldPartition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPartition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPartition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartition: %w", err)
	}
	return oldValue.Partition, nil
}

// ResetPartition resets all changes to the "partition" field.
func (m *VacDepartmentMutation) ResetPartition() {
	m.partition = nil
}

// SetDepartmentID sets the "department_id" field.
func (m *VacDepartmentMutation) SetDepartmentID(i int) {
	m.department_id = &i
	m.adddepartment_id = nil
}

// DepartmentID returns the value of the "department_id" field in the mutation.
func (m *VacDepartmentMutation) DepartmentID() (r int, exists bool) {
	v := m.department_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentID returns the old "department_id" field's value of the VacDepartment entity.
// If the VacDepartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacDepartmentMutation) OldDepartmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentID: %w", err)
	}
	return oldValue.DepartmentID, nil
}

// AddDepartmentID adds i to the "department_id" field.
func (m *VacDepartmentMutation) AddDepartmentID(i int) {
	if m.adddepartment_id != nil {
		*m.adddepartment_id += i
	} else {
		m.adddepartment_id = &i
	}
}

// AddedDepartmentID returns the value that was added to the "department_id" field in this mutation.
func (m *VacDepartmentMutation) AddedDepartmentID() (r int, exists bool) {
	v := m.adddepartment_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetDepartmentID resets all changes to the "department_id" field.
func (m *VacDepartmentMutation) ResetDepartmentID() {
	m.department_id = nil
	m.adddepartment_id = nil
}

// SetData sets the "data" field.
func (m *VacDepartmentMutation) SetData(t *tokyovacapi.Department) {
	m.data = &t
}

// Data returns the value of the "data" field in the mutation.
func (m *VacDepartmentMutation) Data() (r *tokyovacapi.Department, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the VacDepartment entity.
// If the VacDepartment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacDepartmentMutation) OldData(ctx context.Context) (v *tokyovacapi.Department, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *VacDepartmentMutation) ResetData() {
	m.data = nil
}

// Op returns the operation name.
func (m *VacDepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VacDepartment).
func (m *VacDepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VacDepartmentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, vacdepartment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, vacdepartment.FieldUpdatedAt)
	}
	if m.partition != nil {
		fields = append(fields, vacdepartment.FieldPartition)
	}
	if m.department_id != nil {
		fields = append(fields, vacdepartment.FieldDepartmentID)
	}
	if m.data != nil {
		fields = append(fields, vacdepartment.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VacDepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vacdepartment.FieldCreatedAt:
		return m.CreatedAt()
	case vacdepartment.FieldUpdatedAt:
		return m.UpdatedAt()
	case vacdepartment.FieldPartition:
		return m.Partition()
	case vacdepartment.FieldDepartmentID:
		return m.DepartmentID()
	case vacdepartment.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VacDepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vacdepartment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case vacdepartment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case vacdepartment.FieldPartition:
		return m.OldPartition(ctx)
	case vacdepartment.FieldDepartmentID:
		return m.OldDepartmentID(ctx)
	case vacdepartment.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown VacDepartment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VacDepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vacdepartment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case vacdepartment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case vacdepartment.FieldPartition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartition(v)
		return nil
	case vacdepartment.FieldDepartmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentID(v)
		return nil
	case vacdepartment.FieldData:
		v, ok := value.(*tokyovacapi.Department)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown VacDepartment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VacDepartmentMutation) AddedFields() []string {
	var fields []string
	if m.adddepartment_id != nil {
		fields = append(fields, vacdepartment.FieldDepartmentID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VacDepartmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vacdepartment.FieldDepartmentID:
		return m.AddedDepartmentID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VacDepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vacdepartment.FieldDepartmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDepartmentID(v)
		return nil
	}
	return fmt.Errorf("unknown VacDepartment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VacDepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VacDepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VacDepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VacDepartment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VacDepartmentMutation) ResetField(name string) error {
	switch name {
	case vacdepartment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case vacdepartment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case vacdepartment.FieldPartition:
		m.ResetPartition()
		return nil
	case vacdepartment.FieldDepartmentID:
		m.ResetDepartmentID()
		return nil
	case vacdepartment.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown VacDepartment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VacDepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VacDepartmentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VacDepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VacDepartmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VacDepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VacDepartmentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VacDepartmentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VacDepartment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VacDepartmentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VacDepartment edge %s", name)
}

// VacUserMutation represents an operation that mutates the VacUser nodes in the graph.
type VacUserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	created_at      *time.Time
	updated_at      *time.Time
	sns_id          *string
	partition       *string
	range_key       *string
	password        *string
	token           *string
	watcher_enabled *bool
	reserve_config  **schema.ReserveConfig
	reserve_enabled *bool
	reservations    **tokyovacapi.ReservationList
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*VacUser, error)
	predicates      []predicate.VacUser
}

var _ ent.Mutation = (*VacUserMutation)(nil)

// vacuserOption allows management of the mutation configuration using functional options.
type vacuserOption func(*VacUserMutation)

// newVacUserMutation creates new mutation for the VacUser entity.
func newVacUserMutation(c config, op Op, opts ...vacuserOption) *VacUserMutation {
	m := &VacUserMutation{
		config:        c,
		op:            op,
		typ:           TypeVacUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVacUserID sets the ID field of the mutation.
func withVacUserID(id int) vacuserOption {
	return func(m *VacUserMutation) {
		var (
			err   error
			once  sync.Once
			value *VacUser
		)
		m.oldValue = func(ctx context.Context) (*VacUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VacUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVacUser sets the old VacUser of the mutation.
func withVacUser(node *VacUser) vacuserOption {
	return func(m *VacUserMutation) {
		m.oldValue = func(context.Context) (*VacUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VacUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VacUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *VacUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *VacUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VacUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VacUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VacUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VacUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VacUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSnsID sets the "sns_id" field.
func (m *VacUserMutation) SetSnsID(s string) {
	m.sns_id = &s
}

// SnsID returns the value of the "sns_id" field in the mutation.
func (m *VacUserMutation) SnsID() (r string, exists bool) {
	v := m.sns_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSnsID returns the old "sns_id" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldSnsID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSnsID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSnsID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnsID: %w", err)
	}
	return oldValue.SnsID, nil
}

// ResetSnsID resets all changes to the "sns_id" field.
func (m *VacUserMutation) ResetSnsID() {
	m.sns_id = nil
}

// SetPartition sets the "partition" field.
func (m *VacUserMutation) SetPartition(s string) {
	m.partition = &s
}

// Partition returns the value of the "partition" field in the mutation.
func (m *VacUserMutation) Partition() (r string, exists bool) {
	v := m.partition
	if v == nil {
		return
	}
	return *v, true
}

// OldPartition returns the old "partition" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldPartition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPartition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPartition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartition: %w", err)
	}
	return oldValue.Partition, nil
}

// ClearPartition clears the value of the "partition" field.
func (m *VacUserMutation) ClearPartition() {
	m.partition = nil
	m.clearedFields[vacuser.FieldPartition] = struct{}{}
}

// PartitionCleared returns if the "partition" field was cleared in this mutation.
func (m *VacUserMutation) PartitionCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldPartition]
	return ok
}

// ResetPartition resets all changes to the "partition" field.
func (m *VacUserMutation) ResetPartition() {
	m.partition = nil
	delete(m.clearedFields, vacuser.FieldPartition)
}

// SetRangeKey sets the "range_key" field.
func (m *VacUserMutation) SetRangeKey(s string) {
	m.range_key = &s
}

// RangeKey returns the value of the "range_key" field in the mutation.
func (m *VacUserMutation) RangeKey() (r string, exists bool) {
	v := m.range_key
	if v == nil {
		return
	}
	return *v, true
}

// OldRangeKey returns the old "range_key" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldRangeKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRangeKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRangeKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRangeKey: %w", err)
	}
	return oldValue.RangeKey, nil
}

// ClearRangeKey clears the value of the "range_key" field.
func (m *VacUserMutation) ClearRangeKey() {
	m.range_key = nil
	m.clearedFields[vacuser.FieldRangeKey] = struct{}{}
}

// RangeKeyCleared returns if the "range_key" field was cleared in this mutation.
func (m *VacUserMutation) RangeKeyCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldRangeKey]
	return ok
}

// ResetRangeKey resets all changes to the "range_key" field.
func (m *VacUserMutation) ResetRangeKey() {
	m.range_key = nil
	delete(m.clearedFields, vacuser.FieldRangeKey)
}

// SetPassword sets the "password" field.
func (m *VacUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *VacUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *VacUserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[vacuser.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *VacUserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *VacUserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, vacuser.FieldPassword)
}

// SetToken sets the "token" field.
func (m *VacUserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *VacUserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ClearToken clears the value of the "token" field.
func (m *VacUserMutation) ClearToken() {
	m.token = nil
	m.clearedFields[vacuser.FieldToken] = struct{}{}
}

// TokenCleared returns if the "token" field was cleared in this mutation.
func (m *VacUserMutation) TokenCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldToken]
	return ok
}

// ResetToken resets all changes to the "token" field.
func (m *VacUserMutation) ResetToken() {
	m.token = nil
	delete(m.clearedFields, vacuser.FieldToken)
}

// SetWatcherEnabled sets the "watcher_enabled" field.
func (m *VacUserMutation) SetWatcherEnabled(b bool) {
	m.watcher_enabled = &b
}

// WatcherEnabled returns the value of the "watcher_enabled" field in the mutation.
func (m *VacUserMutation) WatcherEnabled() (r bool, exists bool) {
	v := m.watcher_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldWatcherEnabled returns the old "watcher_enabled" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldWatcherEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWatcherEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWatcherEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWatcherEnabled: %w", err)
	}
	return oldValue.WatcherEnabled, nil
}

// ClearWatcherEnabled clears the value of the "watcher_enabled" field.
func (m *VacUserMutation) ClearWatcherEnabled() {
	m.watcher_enabled = nil
	m.clearedFields[vacuser.FieldWatcherEnabled] = struct{}{}
}

// WatcherEnabledCleared returns if the "watcher_enabled" field was cleared in this mutation.
func (m *VacUserMutation) WatcherEnabledCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldWatcherEnabled]
	return ok
}

// ResetWatcherEnabled resets all changes to the "watcher_enabled" field.
func (m *VacUserMutation) ResetWatcherEnabled() {
	m.watcher_enabled = nil
	delete(m.clearedFields, vacuser.FieldWatcherEnabled)
}

// SetReserveConfig sets the "reserve_config" field.
func (m *VacUserMutation) SetReserveConfig(sc *schema.ReserveConfig) {
	m.reserve_config = &sc
}

// ReserveConfig returns the value of the "reserve_config" field in the mutation.
func (m *VacUserMutation) ReserveConfig() (r *schema.ReserveConfig, exists bool) {
	v := m.reserve_config
	if v == nil {
		return
	}
	return *v, true
}

// OldReserveConfig returns the old "reserve_config" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldReserveConfig(ctx context.Context) (v *schema.ReserveConfig, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReserveConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReserveConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReserveConfig: %w", err)
	}
	return oldValue.ReserveConfig, nil
}

// ClearReserveConfig clears the value of the "reserve_config" field.
func (m *VacUserMutation) ClearReserveConfig() {
	m.reserve_config = nil
	m.clearedFields[vacuser.FieldReserveConfig] = struct{}{}
}

// ReserveConfigCleared returns if the "reserve_config" field was cleared in this mutation.
func (m *VacUserMutation) ReserveConfigCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldReserveConfig]
	return ok
}

// ResetReserveConfig resets all changes to the "reserve_config" field.
func (m *VacUserMutation) ResetReserveConfig() {
	m.reserve_config = nil
	delete(m.clearedFields, vacuser.FieldReserveConfig)
}

// SetReserveEnabled sets the "reserve_enabled" field.
func (m *VacUserMutation) SetReserveEnabled(b bool) {
	m.reserve_enabled = &b
}

// ReserveEnabled returns the value of the "reserve_enabled" field in the mutation.
func (m *VacUserMutation) ReserveEnabled() (r bool, exists bool) {
	v := m.reserve_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldReserveEnabled returns the old "reserve_enabled" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldReserveEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReserveEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReserveEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReserveEnabled: %w", err)
	}
	return oldValue.ReserveEnabled, nil
}

// ClearReserveEnabled clears the value of the "reserve_enabled" field.
func (m *VacUserMutation) ClearReserveEnabled() {
	m.reserve_enabled = nil
	m.clearedFields[vacuser.FieldReserveEnabled] = struct{}{}
}

// ReserveEnabledCleared returns if the "reserve_enabled" field was cleared in this mutation.
func (m *VacUserMutation) ReserveEnabledCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldReserveEnabled]
	return ok
}

// ResetReserveEnabled resets all changes to the "reserve_enabled" field.
func (m *VacUserMutation) ResetReserveEnabled() {
	m.reserve_enabled = nil
	delete(m.clearedFields, vacuser.FieldReserveEnabled)
}

// SetReservations sets the "reservations" field.
func (m *VacUserMutation) SetReservations(tl *tokyovacapi.ReservationList) {
	m.reservations = &tl
}

// Reservations returns the value of the "reservations" field in the mutation.
func (m *VacUserMutation) Reservations() (r *tokyovacapi.ReservationList, exists bool) {
	v := m.reservations
	if v == nil {
		return
	}
	return *v, true
}

// OldReservations returns the old "reservations" field's value of the VacUser entity.
// If the VacUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VacUserMutation) OldReservations(ctx context.Context) (v *tokyovacapi.ReservationList, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReservations is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReservations requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReservations: %w", err)
	}
	return oldValue.Reservations, nil
}

// ClearReservations clears the value of the "reservations" field.
func (m *VacUserMutation) ClearReservations() {
	m.reservations = nil
	m.clearedFields[vacuser.FieldReservations] = struct{}{}
}

// ReservationsCleared returns if the "reservations" field was cleared in this mutation.
func (m *VacUserMutation) ReservationsCleared() bool {
	_, ok := m.clearedFields[vacuser.FieldReservations]
	return ok
}

// ResetReservations resets all changes to the "reservations" field.
func (m *VacUserMutation) ResetReservations() {
	m.reservations = nil
	delete(m.clearedFields, vacuser.FieldReservations)
}

// Op returns the operation name.
func (m *VacUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VacUser).
func (m *VacUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VacUserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, vacuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, vacuser.FieldUpdatedAt)
	}
	if m.sns_id != nil {
		fields = append(fields, vacuser.FieldSnsID)
	}
	if m.partition != nil {
		fields = append(fields, vacuser.FieldPartition)
	}
	if m.range_key != nil {
		fields = append(fields, vacuser.FieldRangeKey)
	}
	if m.password != nil {
		fields = append(fields, vacuser.FieldPassword)
	}
	if m.token != nil {
		fields = append(fields, vacuser.FieldToken)
	}
	if m.watcher_enabled != nil {
		fields = append(fields, vacuser.FieldWatcherEnabled)
	}
	if m.reserve_config != nil {
		fields = append(fields, vacuser.FieldReserveConfig)
	}
	if m.reserve_enabled != nil {
		fields = append(fields, vacuser.FieldReserveEnabled)
	}
	if m.reservations != nil {
		fields = append(fields, vacuser.FieldReservations)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VacUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vacuser.FieldCreatedAt:
		return m.CreatedAt()
	case vacuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case vacuser.FieldSnsID:
		return m.SnsID()
	case vacuser.FieldPartition:
		return m.Partition()
	case vacuser.FieldRangeKey:
		return m.RangeKey()
	case vacuser.FieldPassword:
		return m.Password()
	case vacuser.FieldToken:
		return m.Token()
	case vacuser.FieldWatcherEnabled:
		return m.WatcherEnabled()
	case vacuser.FieldReserveConfig:
		return m.ReserveConfig()
	case vacuser.FieldReserveEnabled:
		return m.ReserveEnabled()
	case vacuser.FieldReservations:
		return m.Reservations()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VacUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vacuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case vacuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case vacuser.FieldSnsID:
		return m.OldSnsID(ctx)
	case vacuser.FieldPartition:
		return m.OldPartition(ctx)
	case vacuser.FieldRangeKey:
		return m.OldRangeKey(ctx)
	case vacuser.FieldPassword:
		return m.OldPassword(ctx)
	case vacuser.FieldToken:
		return m.OldToken(ctx)
	case vacuser.FieldWatcherEnabled:
		return m.OldWatcherEnabled(ctx)
	case vacuser.FieldReserveConfig:
		return m.OldReserveConfig(ctx)
	case vacuser.FieldReserveEnabled:
		return m.OldReserveEnabled(ctx)
	case vacuser.FieldReservations:
		return m.OldReservations(ctx)
	}
	return nil, fmt.Errorf("unknown VacUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VacUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vacuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case vacuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case vacuser.FieldSnsID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnsID(v)
		return nil
	case vacuser.FieldPartition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartition(v)
		return nil
	case vacuser.FieldRangeKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRangeKey(v)
		return nil
	case vacuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case vacuser.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case vacuser.FieldWatcherEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWatcherEnabled(v)
		return nil
	case vacuser.FieldReserveConfig:
		v, ok := value.(*schema.ReserveConfig)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReserveConfig(v)
		return nil
	case vacuser.FieldReserveEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReserveEnabled(v)
		return nil
	case vacuser.FieldReservations:
		v, ok := value.(*tokyovacapi.ReservationList)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReservations(v)
		return nil
	}
	return fmt.Errorf("unknown VacUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VacUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VacUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VacUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VacUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VacUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(vacuser.FieldPartition) {
		fields = append(fields, vacuser.FieldPartition)
	}
	if m.FieldCleared(vacuser.FieldRangeKey) {
		fields = append(fields, vacuser.FieldRangeKey)
	}
	if m.FieldCleared(vacuser.FieldPassword) {
		fields = append(fields, vacuser.FieldPassword)
	}
	if m.FieldCleared(vacuser.FieldToken) {
		fields = append(fields, vacuser.FieldToken)
	}
	if m.FieldCleared(vacuser.FieldWatcherEnabled) {
		fields = append(fields, vacuser.FieldWatcherEnabled)
	}
	if m.FieldCleared(vacuser.FieldReserveConfig) {
		fields = append(fields, vacuser.FieldReserveConfig)
	}
	if m.FieldCleared(vacuser.FieldReserveEnabled) {
		fields = append(fields, vacuser.FieldReserveEnabled)
	}
	if m.FieldCleared(vacuser.FieldReservations) {
		fields = append(fields, vacuser.FieldReservations)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VacUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VacUserMutation) ClearField(name string) error {
	switch name {
	case vacuser.FieldPartition:
		m.ClearPartition()
		return nil
	case vacuser.FieldRangeKey:
		m.ClearRangeKey()
		return nil
	case vacuser.FieldPassword:
		m.ClearPassword()
		return nil
	case vacuser.FieldToken:
		m.ClearToken()
		return nil
	case vacuser.FieldWatcherEnabled:
		m.ClearWatcherEnabled()
		return nil
	case vacuser.FieldReserveConfig:
		m.ClearReserveConfig()
		return nil
	case vacuser.FieldReserveEnabled:
		m.ClearReserveEnabled()
		return nil
	case vacuser.FieldReservations:
		m.ClearReservations()
		return nil
	}
	return fmt.Errorf("unknown VacUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VacUserMutation) ResetField(name string) error {
	switch name {
	case vacuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case vacuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case vacuser.FieldSnsID:
		m.ResetSnsID()
		return nil
	case vacuser.FieldPartition:
		m.ResetPartition()
		return nil
	case vacuser.FieldRangeKey:
		m.ResetRangeKey()
		return nil
	case vacuser.FieldPassword:
		m.ResetPassword()
		return nil
	case vacuser.FieldToken:
		m.ResetToken()
		return nil
	case vacuser.FieldWatcherEnabled:
		m.ResetWatcherEnabled()
		return nil
	case vacuser.FieldReserveConfig:
		m.ResetReserveConfig()
		return nil
	case vacuser.FieldReserveEnabled:
		m.ResetReserveEnabled()
		return nil
	case vacuser.FieldReservations:
		m.ResetReservations()
		return nil
	}
	return fmt.Errorf("unknown VacUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VacUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VacUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VacUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VacUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VacUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VacUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VacUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VacUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VacUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VacUser edge %s", name)
}
