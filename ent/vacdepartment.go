// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lixin9311/vac-bot/ent/vacdepartment"
	"github.com/lixin9311/vac-bot/tokyovacapi"
)

// VacDepartment is the model entity for the VacDepartment schema.
type VacDepartment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Partition holds the value of the "partition" field.
	Partition string `json:"partition,omitempty"`
	// DepartmentID holds the value of the "department_id" field.
	DepartmentID int `json:"department_id,omitempty"`
	// Data holds the value of the "data" field.
	Data *tokyovacapi.Department `json:"data,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VacDepartment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vacdepartment.FieldData:
			values[i] = new([]byte)
		case vacdepartment.FieldID, vacdepartment.FieldDepartmentID:
			values[i] = new(sql.NullInt64)
		case vacdepartment.FieldPartition:
			values[i] = new(sql.NullString)
		case vacdepartment.FieldCreatedAt, vacdepartment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VacDepartment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VacDepartment fields.
func (vd *VacDepartment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vacdepartment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vd.ID = int(value.Int64)
		case vacdepartment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vd.CreatedAt = value.Time
			}
		case vacdepartment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vd.UpdatedAt = value.Time
			}
		case vacdepartment.FieldPartition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partition", values[i])
			} else if value.Valid {
				vd.Partition = value.String
			}
		case vacdepartment.FieldDepartmentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value.Valid {
				vd.DepartmentID = int(value.Int64)
			}
		case vacdepartment.FieldData:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vd.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this VacDepartment.
// Note that you need to call VacDepartment.Unwrap() before calling this method if this VacDepartment
// was returned from a transaction, and the transaction was committed or rolled back.
func (vd *VacDepartment) Update() *VacDepartmentUpdateOne {
	return (&VacDepartmentClient{config: vd.config}).UpdateOne(vd)
}

// Unwrap unwraps the VacDepartment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vd *VacDepartment) Unwrap() *VacDepartment {
	tx, ok := vd.config.driver.(*txDriver)
	if !ok {
		panic("ent: VacDepartment is not a transactional entity")
	}
	vd.config.driver = tx.drv
	return vd
}

// String implements the fmt.Stringer.
func (vd *VacDepartment) String() string {
	var builder strings.Builder
	builder.WriteString("VacDepartment(")
	builder.WriteString(fmt.Sprintf("id=%v", vd.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(vd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(vd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", partition=")
	builder.WriteString(vd.Partition)
	builder.WriteString(", department_id=")
	builder.WriteString(fmt.Sprintf("%v", vd.DepartmentID))
	builder.WriteString(", data=")
	builder.WriteString(fmt.Sprintf("%v", vd.Data))
	builder.WriteByte(')')
	return builder.String()
}

// VacDepartments is a parsable slice of VacDepartment.
type VacDepartments []*VacDepartment

func (vd VacDepartments) config(cfg config) {
	for _i := range vd {
		vd[_i].config = cfg
	}
}
