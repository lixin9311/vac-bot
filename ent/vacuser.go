// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lixin9311/vac-bot/ent/schema"
	"github.com/lixin9311/vac-bot/ent/vacuser"
	"github.com/lixin9311/vac-bot/tokyovacapi"
)

// VacUser is the model entity for the VacUser schema.
type VacUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SnsID holds the value of the "sns_id" field.
	SnsID string `json:"sns_id,omitempty"`
	// Partition holds the value of the "partition" field.
	Partition string `json:"partition,omitempty"`
	// RangeKey holds the value of the "range_key" field.
	RangeKey string `json:"range_key,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// WatcherEnabled holds the value of the "watcher_enabled" field.
	WatcherEnabled bool `json:"watcher_enabled,omitempty"`
	// ReserveConfig holds the value of the "reserve_config" field.
	ReserveConfig *schema.ReserveConfig `json:"reserve_config,omitempty"`
	// ReserveEnabled holds the value of the "reserve_enabled" field.
	ReserveEnabled bool `json:"reserve_enabled,omitempty"`
	// Reservations holds the value of the "reservations" field.
	Reservations *tokyovacapi.ReservationList `json:"reservations,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VacUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vacuser.FieldReserveConfig, vacuser.FieldReservations:
			values[i] = new([]byte)
		case vacuser.FieldWatcherEnabled, vacuser.FieldReserveEnabled:
			values[i] = new(sql.NullBool)
		case vacuser.FieldID:
			values[i] = new(sql.NullInt64)
		case vacuser.FieldSnsID, vacuser.FieldPartition, vacuser.FieldRangeKey, vacuser.FieldPassword, vacuser.FieldToken:
			values[i] = new(sql.NullString)
		case vacuser.FieldCreatedAt, vacuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VacUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VacUser fields.
func (vu *VacUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vacuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vu.ID = int(value.Int64)
		case vacuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vu.CreatedAt = value.Time
			}
		case vacuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vu.UpdatedAt = value.Time
			}
		case vacuser.FieldSnsID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sns_id", values[i])
			} else if value.Valid {
				vu.SnsID = value.String
			}
		case vacuser.FieldPartition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field partition", values[i])
			} else if value.Valid {
				vu.Partition = value.String
			}
		case vacuser.FieldRangeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field range_key", values[i])
			} else if value.Valid {
				vu.RangeKey = value.String
			}
		case vacuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				vu.Password = value.String
			}
		case vacuser.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				vu.Token = value.String
			}
		case vacuser.FieldWatcherEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field watcher_enabled", values[i])
			} else if value.Valid {
				vu.WatcherEnabled = value.Bool
			}
		case vacuser.FieldReserveConfig:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reserve_config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vu.ReserveConfig); err != nil {
					return fmt.Errorf("unmarshal field reserve_config: %w", err)
				}
			}
		case vacuser.FieldReserveEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field reserve_enabled", values[i])
			} else if value.Valid {
				vu.ReserveEnabled = value.Bool
			}
		case vacuser.FieldReservations:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field reservations", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &vu.Reservations); err != nil {
					return fmt.Errorf("unmarshal field reservations: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this VacUser.
// Note that you need to call VacUser.Unwrap() before calling this method if this VacUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (vu *VacUser) Update() *VacUserUpdateOne {
	return (&VacUserClient{config: vu.config}).UpdateOne(vu)
}

// Unwrap unwraps the VacUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vu *VacUser) Unwrap() *VacUser {
	tx, ok := vu.config.driver.(*txDriver)
	if !ok {
		panic("ent: VacUser is not a transactional entity")
	}
	vu.config.driver = tx.drv
	return vu
}

// String implements the fmt.Stringer.
func (vu *VacUser) String() string {
	var builder strings.Builder
	builder.WriteString("VacUser(")
	builder.WriteString(fmt.Sprintf("id=%v", vu.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(vu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(vu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", sns_id=")
	builder.WriteString(vu.SnsID)
	builder.WriteString(", partition=")
	builder.WriteString(vu.Partition)
	builder.WriteString(", range_key=")
	builder.WriteString(vu.RangeKey)
	builder.WriteString(", password=")
	builder.WriteString(vu.Password)
	builder.WriteString(", token=")
	builder.WriteString(vu.Token)
	builder.WriteString(", watcher_enabled=")
	builder.WriteString(fmt.Sprintf("%v", vu.WatcherEnabled))
	builder.WriteString(", reserve_config=")
	builder.WriteString(fmt.Sprintf("%v", vu.ReserveConfig))
	builder.WriteString(", reserve_enabled=")
	builder.WriteString(fmt.Sprintf("%v", vu.ReserveEnabled))
	builder.WriteString(", reservations=")
	builder.WriteString(fmt.Sprintf("%v", vu.Reservations))
	builder.WriteByte(')')
	return builder.String()
}

// VacUsers is a parsable slice of VacUser.
type VacUsers []*VacUser

func (vu VacUsers) config(cfg config) {
	for _i := range vu {
		vu[_i].config = cfg
	}
}
