// Code generated by entc, DO NOT EDIT.

package vacuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lixin9311/vac-bot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// SnsID applies equality check predicate on the "sns_id" field. It's identical to SnsIDEQ.
func SnsID(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnsID), v))
	})
}

// Partition applies equality check predicate on the "partition" field. It's identical to PartitionEQ.
func Partition(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartition), v))
	})
}

// RangeKey applies equality check predicate on the "range_key" field. It's identical to RangeKeyEQ.
func RangeKey(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRangeKey), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// WatcherEnabled applies equality check predicate on the "watcher_enabled" field. It's identical to WatcherEnabledEQ.
func WatcherEnabled(v bool) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWatcherEnabled), v))
	})
}

// ReserveEnabled applies equality check predicate on the "reserve_enabled" field. It's identical to ReserveEnabledEQ.
func ReserveEnabled(v bool) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveEnabled), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// SnsIDEQ applies the EQ predicate on the "sns_id" field.
func SnsIDEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSnsID), v))
	})
}

// SnsIDNEQ applies the NEQ predicate on the "sns_id" field.
func SnsIDNEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSnsID), v))
	})
}

// SnsIDIn applies the In predicate on the "sns_id" field.
func SnsIDIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSnsID), v...))
	})
}

// SnsIDNotIn applies the NotIn predicate on the "sns_id" field.
func SnsIDNotIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSnsID), v...))
	})
}

// SnsIDGT applies the GT predicate on the "sns_id" field.
func SnsIDGT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSnsID), v))
	})
}

// SnsIDGTE applies the GTE predicate on the "sns_id" field.
func SnsIDGTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSnsID), v))
	})
}

// SnsIDLT applies the LT predicate on the "sns_id" field.
func SnsIDLT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSnsID), v))
	})
}

// SnsIDLTE applies the LTE predicate on the "sns_id" field.
func SnsIDLTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSnsID), v))
	})
}

// SnsIDContains applies the Contains predicate on the "sns_id" field.
func SnsIDContains(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSnsID), v))
	})
}

// SnsIDHasPrefix applies the HasPrefix predicate on the "sns_id" field.
func SnsIDHasPrefix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSnsID), v))
	})
}

// SnsIDHasSuffix applies the HasSuffix predicate on the "sns_id" field.
func SnsIDHasSuffix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSnsID), v))
	})
}

// SnsIDEqualFold applies the EqualFold predicate on the "sns_id" field.
func SnsIDEqualFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSnsID), v))
	})
}

// SnsIDContainsFold applies the ContainsFold predicate on the "sns_id" field.
func SnsIDContainsFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSnsID), v))
	})
}

// PartitionEQ applies the EQ predicate on the "partition" field.
func PartitionEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPartition), v))
	})
}

// PartitionNEQ applies the NEQ predicate on the "partition" field.
func PartitionNEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPartition), v))
	})
}

// PartitionIn applies the In predicate on the "partition" field.
func PartitionIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPartition), v...))
	})
}

// PartitionNotIn applies the NotIn predicate on the "partition" field.
func PartitionNotIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPartition), v...))
	})
}

// PartitionGT applies the GT predicate on the "partition" field.
func PartitionGT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPartition), v))
	})
}

// PartitionGTE applies the GTE predicate on the "partition" field.
func PartitionGTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPartition), v))
	})
}

// PartitionLT applies the LT predicate on the "partition" field.
func PartitionLT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPartition), v))
	})
}

// PartitionLTE applies the LTE predicate on the "partition" field.
func PartitionLTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPartition), v))
	})
}

// PartitionContains applies the Contains predicate on the "partition" field.
func PartitionContains(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPartition), v))
	})
}

// PartitionHasPrefix applies the HasPrefix predicate on the "partition" field.
func PartitionHasPrefix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPartition), v))
	})
}

// PartitionHasSuffix applies the HasSuffix predicate on the "partition" field.
func PartitionHasSuffix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPartition), v))
	})
}

// PartitionIsNil applies the IsNil predicate on the "partition" field.
func PartitionIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPartition)))
	})
}

// PartitionNotNil applies the NotNil predicate on the "partition" field.
func PartitionNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPartition)))
	})
}

// PartitionEqualFold applies the EqualFold predicate on the "partition" field.
func PartitionEqualFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPartition), v))
	})
}

// PartitionContainsFold applies the ContainsFold predicate on the "partition" field.
func PartitionContainsFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPartition), v))
	})
}

// RangeKeyEQ applies the EQ predicate on the "range_key" field.
func RangeKeyEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRangeKey), v))
	})
}

// RangeKeyNEQ applies the NEQ predicate on the "range_key" field.
func RangeKeyNEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRangeKey), v))
	})
}

// RangeKeyIn applies the In predicate on the "range_key" field.
func RangeKeyIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRangeKey), v...))
	})
}

// RangeKeyNotIn applies the NotIn predicate on the "range_key" field.
func RangeKeyNotIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRangeKey), v...))
	})
}

// RangeKeyGT applies the GT predicate on the "range_key" field.
func RangeKeyGT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRangeKey), v))
	})
}

// RangeKeyGTE applies the GTE predicate on the "range_key" field.
func RangeKeyGTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRangeKey), v))
	})
}

// RangeKeyLT applies the LT predicate on the "range_key" field.
func RangeKeyLT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRangeKey), v))
	})
}

// RangeKeyLTE applies the LTE predicate on the "range_key" field.
func RangeKeyLTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRangeKey), v))
	})
}

// RangeKeyContains applies the Contains predicate on the "range_key" field.
func RangeKeyContains(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRangeKey), v))
	})
}

// RangeKeyHasPrefix applies the HasPrefix predicate on the "range_key" field.
func RangeKeyHasPrefix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRangeKey), v))
	})
}

// RangeKeyHasSuffix applies the HasSuffix predicate on the "range_key" field.
func RangeKeyHasSuffix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRangeKey), v))
	})
}

// RangeKeyIsNil applies the IsNil predicate on the "range_key" field.
func RangeKeyIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRangeKey)))
	})
}

// RangeKeyNotNil applies the NotNil predicate on the "range_key" field.
func RangeKeyNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRangeKey)))
	})
}

// RangeKeyEqualFold applies the EqualFold predicate on the "range_key" field.
func RangeKeyEqualFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRangeKey), v))
	})
}

// RangeKeyContainsFold applies the ContainsFold predicate on the "range_key" field.
func RangeKeyContainsFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRangeKey), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPassword)))
	})
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPassword)))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldToken), v))
	})
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldToken), v))
	})
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldToken), v...))
	})
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.VacUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.VacUser(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldToken), v...))
	})
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldToken), v))
	})
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldToken), v))
	})
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldToken), v))
	})
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldToken), v))
	})
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldToken), v))
	})
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldToken), v))
	})
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldToken), v))
	})
}

// TokenIsNil applies the IsNil predicate on the "token" field.
func TokenIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldToken)))
	})
}

// TokenNotNil applies the NotNil predicate on the "token" field.
func TokenNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldToken)))
	})
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldToken), v))
	})
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldToken), v))
	})
}

// WatcherEnabledEQ applies the EQ predicate on the "watcher_enabled" field.
func WatcherEnabledEQ(v bool) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWatcherEnabled), v))
	})
}

// WatcherEnabledNEQ applies the NEQ predicate on the "watcher_enabled" field.
func WatcherEnabledNEQ(v bool) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWatcherEnabled), v))
	})
}

// WatcherEnabledIsNil applies the IsNil predicate on the "watcher_enabled" field.
func WatcherEnabledIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWatcherEnabled)))
	})
}

// WatcherEnabledNotNil applies the NotNil predicate on the "watcher_enabled" field.
func WatcherEnabledNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWatcherEnabled)))
	})
}

// ReserveConfigIsNil applies the IsNil predicate on the "reserve_config" field.
func ReserveConfigIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReserveConfig)))
	})
}

// ReserveConfigNotNil applies the NotNil predicate on the "reserve_config" field.
func ReserveConfigNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReserveConfig)))
	})
}

// ReserveEnabledEQ applies the EQ predicate on the "reserve_enabled" field.
func ReserveEnabledEQ(v bool) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserveEnabled), v))
	})
}

// ReserveEnabledNEQ applies the NEQ predicate on the "reserve_enabled" field.
func ReserveEnabledNEQ(v bool) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserveEnabled), v))
	})
}

// ReserveEnabledIsNil applies the IsNil predicate on the "reserve_enabled" field.
func ReserveEnabledIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReserveEnabled)))
	})
}

// ReserveEnabledNotNil applies the NotNil predicate on the "reserve_enabled" field.
func ReserveEnabledNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReserveEnabled)))
	})
}

// ReservationsIsNil applies the IsNil predicate on the "reservations" field.
func ReservationsIsNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReservations)))
	})
}

// ReservationsNotNil applies the NotNil predicate on the "reservations" field.
func ReservationsNotNil() predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReservations)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VacUser) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VacUser) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VacUser) predicate.VacUser {
	return predicate.VacUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
