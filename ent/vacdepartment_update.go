// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lixin9311/vac-bot/ent/predicate"
	"github.com/lixin9311/vac-bot/ent/vacdepartment"
	"github.com/lixin9311/vac-bot/tokyovacapi"
)

// VacDepartmentUpdate is the builder for updating VacDepartment entities.
type VacDepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *VacDepartmentMutation
}

// Where adds a new predicate for the VacDepartmentUpdate builder.
func (vdu *VacDepartmentUpdate) Where(ps ...predicate.VacDepartment) *VacDepartmentUpdate {
	vdu.mutation.predicates = append(vdu.mutation.predicates, ps...)
	return vdu
}

// SetUpdatedAt sets the "updated_at" field.
func (vdu *VacDepartmentUpdate) SetUpdatedAt(t time.Time) *VacDepartmentUpdate {
	vdu.mutation.SetUpdatedAt(t)
	return vdu
}

// SetData sets the "data" field.
func (vdu *VacDepartmentUpdate) SetData(t *tokyovacapi.Department) *VacDepartmentUpdate {
	vdu.mutation.SetData(t)
	return vdu
}

// Mutation returns the VacDepartmentMutation object of the builder.
func (vdu *VacDepartmentUpdate) Mutation() *VacDepartmentMutation {
	return vdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdu *VacDepartmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vdu.defaults()
	if len(vdu.hooks) == 0 {
		affected, err = vdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VacDepartmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vdu.mutation = mutation
			affected, err = vdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vdu.hooks) - 1; i >= 0; i-- {
			mut = vdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vdu *VacDepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := vdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdu *VacDepartmentUpdate) Exec(ctx context.Context) error {
	_, err := vdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdu *VacDepartmentUpdate) ExecX(ctx context.Context) {
	if err := vdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdu *VacDepartmentUpdate) defaults() {
	if _, ok := vdu.mutation.UpdatedAt(); !ok {
		v := vacdepartment.UpdateDefaultUpdatedAt()
		vdu.mutation.SetUpdatedAt(v)
	}
}

func (vdu *VacDepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vacdepartment.Table,
			Columns: vacdepartment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vacdepartment.FieldID,
			},
		},
	}
	if ps := vdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vacdepartment.FieldUpdatedAt,
		})
	}
	if value, ok := vdu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vacdepartment.FieldData,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vacdepartment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VacDepartmentUpdateOne is the builder for updating a single VacDepartment entity.
type VacDepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VacDepartmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vduo *VacDepartmentUpdateOne) SetUpdatedAt(t time.Time) *VacDepartmentUpdateOne {
	vduo.mutation.SetUpdatedAt(t)
	return vduo
}

// SetData sets the "data" field.
func (vduo *VacDepartmentUpdateOne) SetData(t *tokyovacapi.Department) *VacDepartmentUpdateOne {
	vduo.mutation.SetData(t)
	return vduo
}

// Mutation returns the VacDepartmentMutation object of the builder.
func (vduo *VacDepartmentUpdateOne) Mutation() *VacDepartmentMutation {
	return vduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vduo *VacDepartmentUpdateOne) Select(field string, fields ...string) *VacDepartmentUpdateOne {
	vduo.fields = append([]string{field}, fields...)
	return vduo
}

// Save executes the query and returns the updated VacDepartment entity.
func (vduo *VacDepartmentUpdateOne) Save(ctx context.Context) (*VacDepartment, error) {
	var (
		err  error
		node *VacDepartment
	)
	vduo.defaults()
	if len(vduo.hooks) == 0 {
		node, err = vduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VacDepartmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vduo.mutation = mutation
			node, err = vduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vduo.hooks) - 1; i >= 0; i-- {
			mut = vduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vduo *VacDepartmentUpdateOne) SaveX(ctx context.Context) *VacDepartment {
	node, err := vduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vduo *VacDepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := vduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vduo *VacDepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := vduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vduo *VacDepartmentUpdateOne) defaults() {
	if _, ok := vduo.mutation.UpdatedAt(); !ok {
		v := vacdepartment.UpdateDefaultUpdatedAt()
		vduo.mutation.SetUpdatedAt(v)
	}
}

func (vduo *VacDepartmentUpdateOne) sqlSave(ctx context.Context) (_node *VacDepartment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vacdepartment.Table,
			Columns: vacdepartment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vacdepartment.FieldID,
			},
		},
	}
	id, ok := vduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VacDepartment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vacdepartment.FieldID)
		for _, f := range fields {
			if !vacdepartment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vacdepartment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vacdepartment.FieldUpdatedAt,
		})
	}
	if value, ok := vduo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vacdepartment.FieldData,
		})
	}
	_node = &VacDepartment{config: vduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vacdepartment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
