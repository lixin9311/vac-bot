// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lixin9311/vac-bot/ent/predicate"
	"github.com/lixin9311/vac-bot/ent/schema"
	"github.com/lixin9311/vac-bot/ent/vacuser"
	"github.com/lixin9311/vac-bot/tokyovacapi"
)

// VacUserUpdate is the builder for updating VacUser entities.
type VacUserUpdate struct {
	config
	hooks    []Hook
	mutation *VacUserMutation
}

// Where adds a new predicate for the VacUserUpdate builder.
func (vuu *VacUserUpdate) Where(ps ...predicate.VacUser) *VacUserUpdate {
	vuu.mutation.predicates = append(vuu.mutation.predicates, ps...)
	return vuu
}

// SetUpdatedAt sets the "updated_at" field.
func (vuu *VacUserUpdate) SetUpdatedAt(t time.Time) *VacUserUpdate {
	vuu.mutation.SetUpdatedAt(t)
	return vuu
}

// SetPartition sets the "partition" field.
func (vuu *VacUserUpdate) SetPartition(s string) *VacUserUpdate {
	vuu.mutation.SetPartition(s)
	return vuu
}

// SetNillablePartition sets the "partition" field if the given value is not nil.
func (vuu *VacUserUpdate) SetNillablePartition(s *string) *VacUserUpdate {
	if s != nil {
		vuu.SetPartition(*s)
	}
	return vuu
}

// ClearPartition clears the value of the "partition" field.
func (vuu *VacUserUpdate) ClearPartition() *VacUserUpdate {
	vuu.mutation.ClearPartition()
	return vuu
}

// SetRangeKey sets the "range_key" field.
func (vuu *VacUserUpdate) SetRangeKey(s string) *VacUserUpdate {
	vuu.mutation.SetRangeKey(s)
	return vuu
}

// SetNillableRangeKey sets the "range_key" field if the given value is not nil.
func (vuu *VacUserUpdate) SetNillableRangeKey(s *string) *VacUserUpdate {
	if s != nil {
		vuu.SetRangeKey(*s)
	}
	return vuu
}

// ClearRangeKey clears the value of the "range_key" field.
func (vuu *VacUserUpdate) ClearRangeKey() *VacUserUpdate {
	vuu.mutation.ClearRangeKey()
	return vuu
}

// SetPassword sets the "password" field.
func (vuu *VacUserUpdate) SetPassword(s string) *VacUserUpdate {
	vuu.mutation.SetPassword(s)
	return vuu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (vuu *VacUserUpdate) SetNillablePassword(s *string) *VacUserUpdate {
	if s != nil {
		vuu.SetPassword(*s)
	}
	return vuu
}

// ClearPassword clears the value of the "password" field.
func (vuu *VacUserUpdate) ClearPassword() *VacUserUpdate {
	vuu.mutation.ClearPassword()
	return vuu
}

// SetToken sets the "token" field.
func (vuu *VacUserUpdate) SetToken(s string) *VacUserUpdate {
	vuu.mutation.SetToken(s)
	return vuu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (vuu *VacUserUpdate) SetNillableToken(s *string) *VacUserUpdate {
	if s != nil {
		vuu.SetToken(*s)
	}
	return vuu
}

// ClearToken clears the value of the "token" field.
func (vuu *VacUserUpdate) ClearToken() *VacUserUpdate {
	vuu.mutation.ClearToken()
	return vuu
}

// SetWatcherEnabled sets the "watcher_enabled" field.
func (vuu *VacUserUpdate) SetWatcherEnabled(b bool) *VacUserUpdate {
	vuu.mutation.SetWatcherEnabled(b)
	return vuu
}

// SetNillableWatcherEnabled sets the "watcher_enabled" field if the given value is not nil.
func (vuu *VacUserUpdate) SetNillableWatcherEnabled(b *bool) *VacUserUpdate {
	if b != nil {
		vuu.SetWatcherEnabled(*b)
	}
	return vuu
}

// ClearWatcherEnabled clears the value of the "watcher_enabled" field.
func (vuu *VacUserUpdate) ClearWatcherEnabled() *VacUserUpdate {
	vuu.mutation.ClearWatcherEnabled()
	return vuu
}

// SetReserveConfig sets the "reserve_config" field.
func (vuu *VacUserUpdate) SetReserveConfig(sc *schema.ReserveConfig) *VacUserUpdate {
	vuu.mutation.SetReserveConfig(sc)
	return vuu
}

// ClearReserveConfig clears the value of the "reserve_config" field.
func (vuu *VacUserUpdate) ClearReserveConfig() *VacUserUpdate {
	vuu.mutation.ClearReserveConfig()
	return vuu
}

// SetReserveEnabled sets the "reserve_enabled" field.
func (vuu *VacUserUpdate) SetReserveEnabled(b bool) *VacUserUpdate {
	vuu.mutation.SetReserveEnabled(b)
	return vuu
}

// SetNillableReserveEnabled sets the "reserve_enabled" field if the given value is not nil.
func (vuu *VacUserUpdate) SetNillableReserveEnabled(b *bool) *VacUserUpdate {
	if b != nil {
		vuu.SetReserveEnabled(*b)
	}
	return vuu
}

// ClearReserveEnabled clears the value of the "reserve_enabled" field.
func (vuu *VacUserUpdate) ClearReserveEnabled() *VacUserUpdate {
	vuu.mutation.ClearReserveEnabled()
	return vuu
}

// SetReservations sets the "reservations" field.
func (vuu *VacUserUpdate) SetReservations(tl *tokyovacapi.ReservationList) *VacUserUpdate {
	vuu.mutation.SetReservations(tl)
	return vuu
}

// ClearReservations clears the value of the "reservations" field.
func (vuu *VacUserUpdate) ClearReservations() *VacUserUpdate {
	vuu.mutation.ClearReservations()
	return vuu
}

// Mutation returns the VacUserMutation object of the builder.
func (vuu *VacUserUpdate) Mutation() *VacUserMutation {
	return vuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vuu *VacUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vuu.defaults()
	if len(vuu.hooks) == 0 {
		affected, err = vuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VacUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuu.mutation = mutation
			affected, err = vuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vuu.hooks) - 1; i >= 0; i-- {
			mut = vuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuu *VacUserUpdate) SaveX(ctx context.Context) int {
	affected, err := vuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vuu *VacUserUpdate) Exec(ctx context.Context) error {
	_, err := vuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuu *VacUserUpdate) ExecX(ctx context.Context) {
	if err := vuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuu *VacUserUpdate) defaults() {
	if _, ok := vuu.mutation.UpdatedAt(); !ok {
		v := vacuser.UpdateDefaultUpdatedAt()
		vuu.mutation.SetUpdatedAt(v)
	}
}

func (vuu *VacUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vacuser.Table,
			Columns: vacuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vacuser.FieldID,
			},
		},
	}
	if ps := vuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vacuser.FieldUpdatedAt,
		})
	}
	if value, ok := vuu.mutation.Partition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldPartition,
		})
	}
	if vuu.mutation.PartitionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldPartition,
		})
	}
	if value, ok := vuu.mutation.RangeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldRangeKey,
		})
	}
	if vuu.mutation.RangeKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldRangeKey,
		})
	}
	if value, ok := vuu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldPassword,
		})
	}
	if vuu.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldPassword,
		})
	}
	if value, ok := vuu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldToken,
		})
	}
	if vuu.mutation.TokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldToken,
		})
	}
	if value, ok := vuu.mutation.WatcherEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vacuser.FieldWatcherEnabled,
		})
	}
	if vuu.mutation.WatcherEnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: vacuser.FieldWatcherEnabled,
		})
	}
	if value, ok := vuu.mutation.ReserveConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vacuser.FieldReserveConfig,
		})
	}
	if vuu.mutation.ReserveConfigCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vacuser.FieldReserveConfig,
		})
	}
	if value, ok := vuu.mutation.ReserveEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vacuser.FieldReserveEnabled,
		})
	}
	if vuu.mutation.ReserveEnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: vacuser.FieldReserveEnabled,
		})
	}
	if value, ok := vuu.mutation.Reservations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vacuser.FieldReservations,
		})
	}
	if vuu.mutation.ReservationsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vacuser.FieldReservations,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vacuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VacUserUpdateOne is the builder for updating a single VacUser entity.
type VacUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VacUserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vuuo *VacUserUpdateOne) SetUpdatedAt(t time.Time) *VacUserUpdateOne {
	vuuo.mutation.SetUpdatedAt(t)
	return vuuo
}

// SetPartition sets the "partition" field.
func (vuuo *VacUserUpdateOne) SetPartition(s string) *VacUserUpdateOne {
	vuuo.mutation.SetPartition(s)
	return vuuo
}

// SetNillablePartition sets the "partition" field if the given value is not nil.
func (vuuo *VacUserUpdateOne) SetNillablePartition(s *string) *VacUserUpdateOne {
	if s != nil {
		vuuo.SetPartition(*s)
	}
	return vuuo
}

// ClearPartition clears the value of the "partition" field.
func (vuuo *VacUserUpdateOne) ClearPartition() *VacUserUpdateOne {
	vuuo.mutation.ClearPartition()
	return vuuo
}

// SetRangeKey sets the "range_key" field.
func (vuuo *VacUserUpdateOne) SetRangeKey(s string) *VacUserUpdateOne {
	vuuo.mutation.SetRangeKey(s)
	return vuuo
}

// SetNillableRangeKey sets the "range_key" field if the given value is not nil.
func (vuuo *VacUserUpdateOne) SetNillableRangeKey(s *string) *VacUserUpdateOne {
	if s != nil {
		vuuo.SetRangeKey(*s)
	}
	return vuuo
}

// ClearRangeKey clears the value of the "range_key" field.
func (vuuo *VacUserUpdateOne) ClearRangeKey() *VacUserUpdateOne {
	vuuo.mutation.ClearRangeKey()
	return vuuo
}

// SetPassword sets the "password" field.
func (vuuo *VacUserUpdateOne) SetPassword(s string) *VacUserUpdateOne {
	vuuo.mutation.SetPassword(s)
	return vuuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (vuuo *VacUserUpdateOne) SetNillablePassword(s *string) *VacUserUpdateOne {
	if s != nil {
		vuuo.SetPassword(*s)
	}
	return vuuo
}

// ClearPassword clears the value of the "password" field.
func (vuuo *VacUserUpdateOne) ClearPassword() *VacUserUpdateOne {
	vuuo.mutation.ClearPassword()
	return vuuo
}

// SetToken sets the "token" field.
func (vuuo *VacUserUpdateOne) SetToken(s string) *VacUserUpdateOne {
	vuuo.mutation.SetToken(s)
	return vuuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (vuuo *VacUserUpdateOne) SetNillableToken(s *string) *VacUserUpdateOne {
	if s != nil {
		vuuo.SetToken(*s)
	}
	return vuuo
}

// ClearToken clears the value of the "token" field.
func (vuuo *VacUserUpdateOne) ClearToken() *VacUserUpdateOne {
	vuuo.mutation.ClearToken()
	return vuuo
}

// SetWatcherEnabled sets the "watcher_enabled" field.
func (vuuo *VacUserUpdateOne) SetWatcherEnabled(b bool) *VacUserUpdateOne {
	vuuo.mutation.SetWatcherEnabled(b)
	return vuuo
}

// SetNillableWatcherEnabled sets the "watcher_enabled" field if the given value is not nil.
func (vuuo *VacUserUpdateOne) SetNillableWatcherEnabled(b *bool) *VacUserUpdateOne {
	if b != nil {
		vuuo.SetWatcherEnabled(*b)
	}
	return vuuo
}

// ClearWatcherEnabled clears the value of the "watcher_enabled" field.
func (vuuo *VacUserUpdateOne) ClearWatcherEnabled() *VacUserUpdateOne {
	vuuo.mutation.ClearWatcherEnabled()
	return vuuo
}

// SetReserveConfig sets the "reserve_config" field.
func (vuuo *VacUserUpdateOne) SetReserveConfig(sc *schema.ReserveConfig) *VacUserUpdateOne {
	vuuo.mutation.SetReserveConfig(sc)
	return vuuo
}

// ClearReserveConfig clears the value of the "reserve_config" field.
func (vuuo *VacUserUpdateOne) ClearReserveConfig() *VacUserUpdateOne {
	vuuo.mutation.ClearReserveConfig()
	return vuuo
}

// SetReserveEnabled sets the "reserve_enabled" field.
func (vuuo *VacUserUpdateOne) SetReserveEnabled(b bool) *VacUserUpdateOne {
	vuuo.mutation.SetReserveEnabled(b)
	return vuuo
}

// SetNillableReserveEnabled sets the "reserve_enabled" field if the given value is not nil.
func (vuuo *VacUserUpdateOne) SetNillableReserveEnabled(b *bool) *VacUserUpdateOne {
	if b != nil {
		vuuo.SetReserveEnabled(*b)
	}
	return vuuo
}

// ClearReserveEnabled clears the value of the "reserve_enabled" field.
func (vuuo *VacUserUpdateOne) ClearReserveEnabled() *VacUserUpdateOne {
	vuuo.mutation.ClearReserveEnabled()
	return vuuo
}

// SetReservations sets the "reservations" field.
func (vuuo *VacUserUpdateOne) SetReservations(tl *tokyovacapi.ReservationList) *VacUserUpdateOne {
	vuuo.mutation.SetReservations(tl)
	return vuuo
}

// ClearReservations clears the value of the "reservations" field.
func (vuuo *VacUserUpdateOne) ClearReservations() *VacUserUpdateOne {
	vuuo.mutation.ClearReservations()
	return vuuo
}

// Mutation returns the VacUserMutation object of the builder.
func (vuuo *VacUserUpdateOne) Mutation() *VacUserMutation {
	return vuuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuuo *VacUserUpdateOne) Select(field string, fields ...string) *VacUserUpdateOne {
	vuuo.fields = append([]string{field}, fields...)
	return vuuo
}

// Save executes the query and returns the updated VacUser entity.
func (vuuo *VacUserUpdateOne) Save(ctx context.Context) (*VacUser, error) {
	var (
		err  error
		node *VacUser
	)
	vuuo.defaults()
	if len(vuuo.hooks) == 0 {
		node, err = vuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VacUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuuo.mutation = mutation
			node, err = vuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuuo.hooks) - 1; i >= 0; i-- {
			mut = vuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuuo *VacUserUpdateOne) SaveX(ctx context.Context) *VacUser {
	node, err := vuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuuo *VacUserUpdateOne) Exec(ctx context.Context) error {
	_, err := vuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuuo *VacUserUpdateOne) ExecX(ctx context.Context) {
	if err := vuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuuo *VacUserUpdateOne) defaults() {
	if _, ok := vuuo.mutation.UpdatedAt(); !ok {
		v := vacuser.UpdateDefaultUpdatedAt()
		vuuo.mutation.SetUpdatedAt(v)
	}
}

func (vuuo *VacUserUpdateOne) sqlSave(ctx context.Context) (_node *VacUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vacuser.Table,
			Columns: vacuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vacuser.FieldID,
			},
		},
	}
	id, ok := vuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VacUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vacuser.FieldID)
		for _, f := range fields {
			if !vacuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vacuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vacuser.FieldUpdatedAt,
		})
	}
	if value, ok := vuuo.mutation.Partition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldPartition,
		})
	}
	if vuuo.mutation.PartitionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldPartition,
		})
	}
	if value, ok := vuuo.mutation.RangeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldRangeKey,
		})
	}
	if vuuo.mutation.RangeKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldRangeKey,
		})
	}
	if value, ok := vuuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldPassword,
		})
	}
	if vuuo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldPassword,
		})
	}
	if value, ok := vuuo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vacuser.FieldToken,
		})
	}
	if vuuo.mutation.TokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: vacuser.FieldToken,
		})
	}
	if value, ok := vuuo.mutation.WatcherEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vacuser.FieldWatcherEnabled,
		})
	}
	if vuuo.mutation.WatcherEnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: vacuser.FieldWatcherEnabled,
		})
	}
	if value, ok := vuuo.mutation.ReserveConfig(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vacuser.FieldReserveConfig,
		})
	}
	if vuuo.mutation.ReserveConfigCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vacuser.FieldReserveConfig,
		})
	}
	if value, ok := vuuo.mutation.ReserveEnabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vacuser.FieldReserveEnabled,
		})
	}
	if vuuo.mutation.ReserveEnabledCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: vacuser.FieldReserveEnabled,
		})
	}
	if value, ok := vuuo.mutation.Reservations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: vacuser.FieldReservations,
		})
	}
	if vuuo.mutation.ReservationsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: vacuser.FieldReservations,
		})
	}
	_node = &VacUser{config: vuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vacuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
